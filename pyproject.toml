[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "PolyChron"
version = "0.1.0"
requires-python = ">= 3.9"
authors = [
    {name = "Bryony Moody", email = "bryony.moody@sheffield.ac.uk"},
    {name = "Peter Heywood", email = "p.heywood@sheffield.ac.uk"},
]
maintainers = [
    {name = "Bryony Moody", email = "bryony.moody@sheffield.ac.uk"},
]
readme = "README.md"
# license = ""
# license-files = ["LICENSE.md"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    # "Programming Language :: Python :: 3.13",
    # Ensure this package does not get uploaded to pypi until it is ready.
    "Private :: Do Not Upload",
]
dependencies = [
    "graphviz",
    "numpy<2",
    "matplotlib",
    "networkx>=3.4; python_version >= '3.10'", # required for https://github.com/networkx/networkx/pull/7588, but not available for py 3.9
    "networkx>=2; python_version < '3.10'",
    "packaging",
    "pandas<2",
    "pydot",
    "ttkthemes",
]

# When widely supported, it would be better to leverage [dependency-groups] than optional-extras for at least dev. https://packaging.python.org/en/latest/specifications/dependency-groups
[project.optional-dependencies]
docs = [
    "mkdocstrings[python]>=0.18",
    "mkdocs-material>=9.5.0",
]
test = [
    "pytest>=6.0"
]
dev = [
    "ruff"
]

[project.urls]
# Documentation = "https://bryonymoody.github.io/PolyChron"
Repository = "https://github.com/bryonymoody/PolyChron"
Issues = "https://github.com/bryonymoody/PolyChron/issues"

[project.gui-scripts]
polychron = "PolyChron.gui:main"

# pytest options
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra -q",
    "--import-mode=importlib",
]
testpaths = [
    "tests",
]

# Linter configuration
[tool.ruff]
line-length = 120
indent-width = 4
# Exclude pre-existing files until they have intentionally been linted
extend-exclude = [
    "PolyChron/automated_mcmc_ordering_coupling_copy.py",
]
# Select which ruff rules to apply when linting.
lint.select = ["E4", "E7", "E9", "F"]
# But ignore some of them
lint.ignore = [
    "E741", # https://docs.astral.sh/ruff/rules/ambiguous-variable-name/
]
