#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov  7 16:58:55 2020

@author: bryony
"""


#testing functions for the app#

FILE_INPUT = "fig-12-sequence.dot"
#FILE_INPUT = "bldg-1-5-chronology.dot"
CURRENT_GRAPH = nx.DiGraph(imagefunc(FILE_INPUT))
file_graph = CURRENT_GRAPH
imgrender(nx.nx_pydot.to_pydot(CURRENT_GRAPH))
tes = read_dot(FILE_INPUT)
#ff = json_graph.dumps(CURRENT_GRAPH)
xx = nx.nx_pydot.to_pydot(CURRENT_GRAPH)
xx.write_png('somefile.png')

################IMPORTANT, INPUT FOR MCMC#####################
nodes = list(CURRENT_GRAPH.nodes())
nodes.reverse()
strav_vec = [[list(CURRENT_GRAPH.predecessors(i)), list(CURRENT_GRAPH.successors(i))] for i in nodes]
 

   
key_ref = [nx.get_node_attributes(CURRENT_GRAPH, "phase")[i] for i in nodes]
#get this linking up with the colour, look at how it goes into Toms software"

node_coords_fromjson("fi_new.txt")

CURRENT_GRAPH = nx.contracted_nodes(CURRENT_GRAPH, "486", "483")
x = list(CURRENT_GRAPH) 
    
y = ["486 = 483" if i=="486" else i for i in x] 

test = dict(zip(x, y))

CURRENT_GRAPH = nx.relabel_nodes(CURRENT_GRAPH, test)
type(CURRENT_GRAPH)


            if len(self.comb_nodes) == 1:       
                if self.variable.get() == "Combine Node with "+ str(self.comb_nodes[0]):
                    self.comb_nodes = np.append(self.comb_nodes, node)
                    self.graph = nx.contracted_nodes(self.graph, self.comb_nodes[0], self.comb_nodes[1])
                    x_nod = list(self.graph) 
                    newnode = str(self.comb_nodes[0]) + " = " + str(self.comb_nodes[1])
                    y_nod = [newnode if i==self.comb_nodes[0] else i for i in x_nod] 
                    mapping = dict(zip(x_nod, y_nod))
                    self.graph = nx.relabel_nodes(self.graph, mapping)
                    self.OptionList.remove("Combine Node with "+ str(self.comb_nodes[0]))
                    self.testmenu = tk.OptionMenu(self.littlecanvas, self.variable, *self.OptionList, command = self.nodes)
                    self.comb_nodes = []
                    
            if self.variable.get() == "Combine node":
                if len(self.comb_nodes) == 1:
                    self.OptionList.remove("Combine Node with "+ str(self.comb_nodes[0]))
                    self.testmenu = tk.OptionMenu(self.littlecanvas, self.variable, *self.OptionList, command = self.nodes)
                    self.comb_nodes = []                    
                self.comb_nodes = np.append(self.comb_nodes, node)                
                self.OptionList.append("Combine Node with "+ str(self.comb_nodes[0]))
                print("test", self.comb_nodes)
                self.testmenu = tk.OptionMenu(self.littlecanvas, self.variable, *self.OptionList, command = self.nodes)                       


def get_svg(self, dot_str):
        import graphviz as gv

        return gv.Source(dot_str, format='svg', engine=self.engine).pipe().decode('utf-8') 





import matplotlib.pyplot as plt

def polygonfunc(i):
    x = re.findall(r'points="(.*?)"', i)[0].replace(' ', ',')
    a = x.split(",")
    coords_converted = [float(a[2]), float(a[6]), -1*float(a[7]), -1*float(a[3])]
    return(coords_converted)

def ellipsefunc(i):
    x = re.findall(r'cx=(.*?)/>', i)[0].replace(' ', ',')
    x = x.replace('cy=', '').replace('rx=', '').replace('ry=','').replace('"', '')
    a = x.split(",")
    coords_converted = [float(a[0]) - float(a[2]), float(a[0]) + float(a[2]), -1*float(a[1]) - float(a[3]), -1*float(a[1]) + float(a[3])]
    return(coords_converted)


def node_coords_fromjson(graph):
    t0 = time.time()
    """Gets coordinates of each node"""
    graphs = nx.nx_pydot.to_pydot(graph)    
    svg_string = str(graphs.create_svg())
    scale_info = re.search('points=(.*?)/>', svg_string).group(1).replace(' ', ',')
    scale_info = scale_info.split(",")
    scale = [float(scale_info[4]), -1*float(scale_info[3])]
    coords_x = re.findall(r'id="node(.*?)</text>', svg_string)      
    coords_temp = [polygonfunc(i) if "points" in i else ellipsefunc(i) for i in coords_x]
    node_test = re.findall(r'node">\\n<title>(.*?)</title>', svg_string)
    node_list = [i.replace('&#45;', '-') for i in node_test]
    new_pos = dict(zip(node_list, coords_temp))
    df = pd.DataFrame.from_dict(new_pos, orient='index', columns=['x_lower', 'x_upper', 'y_lower', 'y_upper'])
    print((sys._getframe().f_code.co_name), str(time.time() - t0))
    return df, scale

FILE_INPUT = "fig-12-sequence.dot"
#FILE_INPUT = "bldg-1-5-chronology.dot"
CURRENT_GRAPH = nx.DiGraph(imagefunc(FILE_INPUT))
file_graph = CURRENT_GRAPH

def alp_beta_node_add(x, graph):
    graph.add_node("a_" + str(x), shape="diamond", fontsize="20.0",
                                   fontname="Arial", penwidth="1.0")
    graph.add_node("b_" + str(x), shape="diamond", fontsize="20.0",
                                   fontname="Arial", penwidth="1.0")
  

def phase_info_func_diff(file_graph):
    t0 = time.time()
    """returns a dictionary of phases and nodes in each phase"""
    phase = nx.get_node_attributes(file_graph, "fillcolor")
    phase_norm = [phase[ph][phase[ph].rfind("/")+1:len(phase[ph])] for ph in phase]
# ####code to get colours####
    f_str = open(str(FILE_INPUT), "r")
    dotstr = f_str.read()
    dotstr = dotstr.replace(";<", "@<")
    dotstr = dotstr.replace("14.0", "50.0")
##change any ';>' to '@>' then back again after
    x_phaseinf = dotstr.rsplit(";")
    for i in enumerate(x_phaseinf):
        x_phaseinf[i[0]] = x_phaseinf[i[0]].replace("@<", ";<")
    node_list = list(file_graph.nodes)
    node_info = all_node_info(node_list, x_phaseinf, list())
    res = []
    for key in phase.keys():
        res.append(phase[key])
    x_l, y_l, phase_list, phase_trck = edge_of_phase(list(nx.line_graph(file_graph)), list(set(res)), node_list, node_info)
    testdic = dict(zip(x_l, y_l))
    reversed_dict = {}
    for key, value in testdic.items():
        reversed_dict.setdefault(value, [])
        reversed_dict[value].append(key)
        
  #  print((sys._getframe().f_code.co_name), str(time.time() - t0))    
    return reversed_dict

xs, ys = [], []
for x, y in list(file_graph.edges):
    xs.append(x)
    ys.append(y)
    

evenlist = [] 
oddlist = [] 
elist = [] 
olist = []
for i in range(len(x_l)): 
  if (i % 2 == 0): 
     evenlist.append(x_l[i])
     elist.append(y_l[i]) 
  else: 
     oddlist.append(x_l[i])
     olist.append(y_l[i])
     
for j in range(len(evenlist)):     
     file_graph.remove_edge(oddlist[j], evenlist[j])     
#add boundary nodes
#add edges between nodes using y_l as reference
#figure out top and bottom nodes
#figure out floating nodes

for node in list(phase_list):
    alp_beta_node_add(node, file_graph)
    
#for i, j in enumerate(elist):
#    file_graph.add_edge("a_" + str(j), evenlist[i])
    
for i, j in enumerate(elist):
    file_graph.add_edge("a_" + str(j), evenlist[i], arrows=False)    
for i, j in enumerate(olist):
    file_graph.add_edge(oddlist[i], "b_" + str(j.replace("_below", "")), arrows=False)

phase_norm = [phase[ph][phase[ph].rfind("/")+1:len(phase[ph])] for ph in phase]
all_node_phase = dict(zip(node_list, phase_norm))       
for i in node_list:
    if (i in xs) == False:
        if (i in ys) == False:
            file_graph.add_edge("a_" + str(all_node_phase[i]), i, arrows=False)
            file_graph.add_edge(i, "b_" + str(all_node_phase[i]), arrows=False)
        else:
            file_graph.add_edge(i, "b_" + str(all_node_phase[i]), arrows=False)
    elif (i in xs) == True:
        if (i in ys) == False:
            print(i)
            file_graph.add_edge("a_" + str(all_node_phase[i]), i, arrows=False)

for p in list(set(phase_trck)):
    file_graph.add_edge("b_" + str(p[1]), "a_" + str(p[0]))

file_graph_temp = nx.transitive_reduction(file_graph)    
a = set(file_graph.edges())
b = set(file_graph_temp.edges())
rem = list(a-b)[0]
file_graph.remove_edge(rem[0], rem[1])

#betas = [node_list[i] for i in list(np.where(np.array(nodetyp) == "beta")[0])]
#alphas = [node_list[i] for i in list(np.where(np.array(nodetyp) == "alpha")[0])]  
#floating = [node_list[i] for i in list(np.where(np.array(nodetyp) == "floating")[0])]  

 #mydict.keys()[.values().index(16)]      

graphedges = [('4', '3'), ('4', '3'), ('4', '3'), ('3', '2'), ('4', '3'), ('3', '2'), ('3', '2'), ('4', '2'), ('3', '2')]
graph = nx.DiGraph()
graph.add_edges_from(graphedges)
graph_new = nx.transitive_reduction(graph)
phases = list(graph_new.edges())
menu_list1 = []
for i in phases:
    menu_list1.append("Relationship between start of phase " + str(i[0]) + " and end of phase " + str(i[1]))
    
menu_list2 = ["abuting", "gap", "overlap"]