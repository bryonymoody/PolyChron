#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  6 11:22:06 2020

@author: bryony
"""


from graphviz import Source
import networkx as nx
from networkx.drawing.nx_pydot import read_dot, write_dot, to_pydot
import tempfile
import time
import pydot
from PIL import Image
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import re
#import svgpathtools
from svgpathtools import svg2paths




file_graph = read_dot('bldg-1-5-chronology.dot') 
file_graph = read_dot("fig-12-polygon-1.dot")
file_graph = read_dot('fig-12-sequence.dot')
 ####code to get colours####
f=open('fig-12-sequence.dot', "r")
dotstr = f.read()
x = dotstr.rsplit(";")
x.pop(8)
x.pop(8)
node_list = list(file_graph.nodes)
node_info = list()
for i in node_list:
    for j in x:
        b = re.search("\"(.*)\" ", j)
        if b != None:
            if i == b.group(1):
                tset = j[(j.index('[')+1):(len(j)-1)]
                atr_new = tset.replace('] [', ',\'')
                atr_new = atr_new.replace('=', '\':')
                atr_newer = str('{\''+atr_new+'}')
                dicc = eval(atr_newer)
                node_info.append(dicc)

for k in range(len(node_list)):
    node_info[k].update({"dates":"test", "finds":"empty", "phase":"phase1", "width":0.6, "height":0.5})              
   
#add colours to graph
attrs = dict(zip(node_list, node_info))
nx.set_node_attributes(file_graph, attrs)

#########################


#################code to obtain phases############################

phase = nx.get_node_attributes(file_graph, "fillcolor")
res = [] 
for key in phase.keys() : 
    res.append(phase[key]) 
phaseset = list(set(res))
mydict = {}
test1 = list(nx.line_graph(file_graph))
for i in range(len(phaseset)):
   # print(phaseset[i][phaseset[i].rfind("/")+1:len(phaseset[i])])
    temp_nodes_list = []
    for j in range(len(node_list)):
        if node_info[j]["fillcolor"] == phaseset[i]:
          #  print(node_list[j])
            temp_nodes_list.append(node_list[j])
            pp = "Phase " + str(phaseset[i][phaseset[i].rfind("/")+1:len(phaseset[i])])
            node_info[j].update({"phase":pp})
    
    print(temp_nodes_list) 
    mydict[str(phaseset[i][phaseset[i].rfind("/")+1:len(phaseset[i])])]= temp_nodes_list
###################################################################
x = list(mydict.keys())
x.sort()
for k in x:
    print(k)

#file_graph.remove_node('487')
nx.get_node_attributes(file_graph, "height")
#file = "fig-12-sequence.dot"
currentgraph = file_graph

x_l = []
y_l = []
for i in range(len(test1)):
    for key in mydict:
        if test1[i][1] in mydict[key] and test1[i][0] not in mydict[key]:
       #     if test1[i][0] not in mydict[key]:
                   x = test1[i][1]
                   y = key
                   print(x,y)
                   x_l.append(x)
                   y_l.append(y)
testdic = dict(zip(x_l, y_l))    
 

reversed_dict = {}
for key, value in testdic.items():
    reversed_dict.setdefault(value, [])
    reversed_dict[value].append(key)       
       
        
def nodes(eventorigin):
#   global node, x, y, currentgraph
   
   x = 98
   y = 482 
   node = nodecheck(x, y, currentgraph)
   print(node)
   if node == "no node":
       currentgraph = currentgraph
       print("1")
   else: 
       currentgraph = currentgraph.remove_node(str(node))
       print("2")
 

#for p in node_list:    
#    file.nodes[p]['fixedsize'] ='true'
#    file.nodes[p]['width'] ='0.92pt'
#    file.nodes[p]['height'] = '0.57pt'

pos_dag = nx.drawing.nx_pydot.graphviz_layout(file_graph, prog='dot')
dictionary = dict(zip(list(A.nodes()), layout))

#writes a temp file to store the dot code in so I can laod it
fi_new = tempfile.TemporaryFile()
write_dot(file_graph, 'fi_1')
s = Source.from_file('fi_1', format = 'png') #this and s.view allow us to view the dot file
s.view()

fi_new.close()

node_df = pd.DataFrame.from_dict(pos_dag, orient = 'index')

meta1 = pd.DataFrame.from_dict(currentgraph.nodes()["432"], orient='index')
node_info[1].update({"width":"2.6", "height":"1.5"})   
individ_attrs = zip(node_list, node_info)  
         # node_info.append({"dates":"test", "finds":"empty"})      
attrs = dict(individ_attrs) #add the dictionary of attributed to a node

   
 #  attrs.update({"dates":"test", "finds":"empty"})
nx.set_node_attributes(currentgraph, attrs)


y_dist = min(np.array(node_df[1])) - 0.5
x_dist = min(np.array(node_df[0])) - 0.5
x_lower = np.array(node_df[0]) - x_dist
x_upper = np.array(node_df[0]) + x_dist
y_lower = np.array(node_df[1]) - y_dist
y_upper = np.array(node_df[1]) + y_dist
#fileinput = "fig-12-sequence.dot"
node_df["x_lower"] = x_lower
node_df["x_upper"] = x_upper
node_df["y_lower"] = y_lower
node_df["y_upper"] = y_upper

x,y = 50, 350
def nodecheck(x, y, file):
    #file = read_dot(fileinput)
    node_inside = "no node" 
    #node_list = list(file.nodes)
    pos_dag = nx.drawing.nx_pydot.graphviz_layout(file, prog='dot')
    node_df = pd.DataFrame.from_dict(pos_dag, orient = 'index')
    y_dist = min(np.array(node_df[1])) - 0.5
    x_dist = min(np.array(node_df[0])) - 0.5
    x_lower = np.array(node_df[0]) - x_dist
    x_upper = np.array(node_df[0]) + x_dist
    y_lower = np.array(node_df[1]) - y_dist
    y_upper = np.array(node_df[1]) + y_dist
    #fileinput = "fig-12-sequence.dot"
    node_df["x_lower"] = x_lower
    node_df["x_upper"] = x_upper
    node_df["y_lower"] = y_lower
    node_df["y_upper"] = y_upper
    #node_inside = False
    for n in range(len(node_df)):
        if (node_df.iloc[n].x_lower < x < node_df.iloc[n].x_upper) and (node_df.iloc[n].y_lower < y < node_df.iloc[n].y_upper):
            node_inside = node_df.iloc[n].name        
    return node_inside

to_pdot = nx.drawing.nx_pydot.to_pydot
pdot = to_pdot(currentgraph)
node = nodecheck(86, 450.5, currentgraph)

def nodedel(x, file):
    file_graph = read_dot(file)
    if x == "no node":
        file = file
    else:
        file = write_dot(file_graph.remove_node(x))
        

def imagefunc(fileinput):
    
   file = read_dot(fileinput)
 ####code to get colours####
   f=open(str(fileinput), "r")
   dotstr = f.read()
   x = dotstr.rsplit(";")
   node_list = list(file.nodes)
   node_info = list()
   for i in node_list:
       for j in x:
           b = re.search("\"(.*)\" ", j)
           if b != None:
               if i == b.group(1):
                   tset = j[(j.index('[')+1):(len(j)-1)]
                   atr_new = tset.replace('] [', ',\'')
                   atr_new = atr_new.replace('=', '\':')
                   atr_newer = str('{\''+atr_new+'}')
                   dicc = eval(atr_newer)
                   node_info.append(dicc)
 #  for p in node_list:
   for k in range(len(node_list)):
       node_info[k].update({"dates":"test", "finds":"empty", "phase":"phase1", "width":"4", "height":"3"})              

   node_info[1].update({"pos":"(10,10)"})    
  #    print(p)
   attrs = dict(zip(node_list, node_info))
   nx.set_node_attributes(file, attrs)
   fi_new = tempfile.TemporaryFile()
   write_dot(file, 'fi_new')
   (graph,) = pydot.graph_from_dot_file('fi_new')
  # testdag = tempfile.TemporaryFile()
   graph.write_png('testdag.png')
   outp = Image.open('testdag.png')
  # Image.open("testdag.png")
#   graph = Source.from_file('fi_new', format = 'png') #this and s.view allow us to
   return outp
   fi_new.close()

def imagefunc(fileinput):
   fileinput = "fig-12-sequence_c.dot"
   file = read_dot(fileinput)
 ####code to get colours####
   f=open(str(fileinput), "r")
   dotstr = f.read()
   dotstr = dotstr.replace(";<", "@<")
   dotstr = dotstr.replace("14.0", "50.0")
#change any ';>' to '@>' then back again after
   x = dotstr.rsplit(";")
   for i in range(len(x)):
      x[i] = x[i].replace("@<", ";<")       
   node_list = list(file.nodes)
   node_info = list() 
 #  j = x[15]
   
   for i in node_list:
       for j in x:
           b = re.search("\"(.*)\" ", j)
           if b != None:
               if i == b.group(1):
                   if i in j and '->' not in j:
                       tset = j[(j.index('[')+1):(len(j)-1)]
                       atr_new = tset.replace('] [', '\',\'')
                       atr_new = atr_new.replace('=', '\':\' ')
                       atr_new = atr_new.replace('\' \"', '\"')
                       atr_new = atr_new.replace('\"\'', '\"')
                       atr_new = atr_new.replace('\' ', '\'')
                       atr_newer = str('{\''+atr_new+'}')
                       #print(atr_new)
                       dicc = eval(atr_newer)
                       node_info.append(dicc)
   
   for k in range(len(node_list)): 
        node_info[k].update({"dates":"test", "finds":"empty", "phase":"phase1", "width":"0.6", "height":"0.5"})              
      #  print(node_info[k])  
   
   node_info[1].update({"pos":'"10,10!"'})            
   individ_attrs = zip(node_list, node_info)
   
         # node_info.append({"dates":"test", "finds":"empty"})           
   attrs = dict(individ_attrs) #add the dictionary of attributed to a node

   
 #  attrs.update({"dates":"test", "finds":"empty"})
   nx.set_node_attributes(file, attrs)

   return file

#A = nx.nx_agraph.to_agraph(file)
#one = A.add_subgraph(['452','486','483'],rank='same')

#need to extract list from reversed dic here
def imgrender_phase(file):  
   write_dot(file, 'fi_new.txt')
   my_file = open("fi_new.txt")
   file_content = my_file.read()
   new_string = file_content[:-2] + "{rank = same; 452; 486;}\n" + file_content[-2]
   textfile = open('fi_new.txt', 'w')
   textfile.write(new_string)
   textfile.close()
   (graph,) = pydot.graph_from_dot_file('fi_new.txt')
   graph.write_png('testdag.png' )
   outp = Image.open('testdag.png')
 #  print(outp.size)
   return outp


def node_coords_fromjson(file_ext):
    my_file = open(file_ext)
    file_content = my_file.read()
    graphs = pydot.graph_from_dot_data(file_content)
    svg_string = str(graphs[0].create_svg("json")) 
    x = re.findall(r'me(.*?)"na', svg_string)
    json_nodelist = []
    json_nodecoord = []
    for i in range(len(x)):
        if "pos" in x[i]:
            x_temp = re.findall(r'\": "(.*?)",\\n',x[i])
            cord_temp = re.findall(r'pos\": "(.*?)",\\n',x[i])
            json_nodelist.append(x_temp[0])
            json_nodecoord.append(eval(cord_temp[0]))
    new_pos = dict(zip(json_nodelist, json_nodecoord))
    return new_pos

newer_pos = node_coords_fromjson("fi_new.txt")


def imgrender(file):  
   write_dot(file, 'fi_new.txt')
   (graph,) = pydot.graph_from_dot_file('fi_new.txt')
   graph.write_png('testdag.png' )
   outp = Image.open('testdag.png')
 #  print(outp.size)
   return outp

          # out.save("testdag.png")
    inp = Image.open("testdag.png")
    inp = trim(inp)
    inp.save("testdag.png")
    outp = Image.open("testdag.png")
#starttime = time.time()    
d = imagefunc("fig-12-sequence_c.dot")   
e = imgrender_phase(d)#imagefunc(
#function to remove nodes
#file.remove_node('530')
#function to get your coordinates

#finaltime = time.time() - starttime 