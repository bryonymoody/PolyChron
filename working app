#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar  9 12:35:28 2020

@author: bryony
"""
import tkinter as tk
from PIL import Image, ImageTk
from networkx.drawing.nx_pydot import read_dot, write_dot
import networkx as nx
import pydot
import numpy as np
import pandas as pd


def getorigin(eventorigin):
  global x,y, node
  x = eventorigin.x 
  y = eventorigin.y  
  print(x,y)
  
  
    
#fileinput= "fig-12-sequence.dot"

def heighwidth(file):
    pos_dag = nx.drawing.nx_pydot.graphviz_layout(file, prog='dot')
    node_df = pd.DataFrame.from_dict(pos_dag, orient = 'index')
    xmax = max(np.array(node_df[0])) + 0.5
    ymax = max(np.array(node_df[1])) + 0.5
    return xmax, ymax
#fileinput = 'bldg-1-5-chronology.dot' 
fileinput = "fig-12-sequence.dot"
def imagefunc(fileinput):
   file = read_dot(fileinput)
 ####code to get colours####
   f=open(str(fileinput), "r")
   dotstr = f.read()
#   dotstr = dotstr.replace(";<", "@<")
#change any ';>' to '@>' then back again after
   x = dotstr.rsplit(";")
#   for i in range(len(x)):
#       x[i] = x[i].replace("@<", ";<")       
   node_list = list(file.nodes)
   node_info = list() 
 #  j = x[15]
   
   for i in node_list:
       for j in x:
            if i in j and '->' not in j:
               tset = j[(j.index('[')+1):(len(j)-1)]
               atr_new = tset.replace('] [', ',\'')
               atr_new = atr_new.replace('=', '\': ')
               atr_newer = str('{\''+atr_new+'}')
               dicc = eval(atr_newer)
               node_info.append(dicc)
               
   attrs = dict(zip(node_list, node_info))
   nx.set_node_attributes(file, attrs)
   return file

 


def imgrender(file): 
   write_dot(file, 'fi_new')
   (graph,) = pydot.graph_from_dot_file('fi_new')
   graph.write_png('testdag.png')
   outp = Image.open('testdag.png')
   return outp


currentgraph = imagefunc("fig-12-sequence.dot")


class MainFrame(tk.Tk):    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.delnodes = []
        self.edge_nodes = []
        self.edges_del = []
        self.temp = []
        self.x1 = 1
        self.canvas = tk.Canvas(self, bg = "#b3dcf2",  bd = 0, highlightthickness=0)  
        self.canvas.place(relx=0, rely=0, relwidth=1, relheight=1)
        self.littlecanvas= tk.Canvas(self.canvas, bg = 'white', bd = 0, highlightthickness=0)
        self.littlecanvas.bind("<Button 3>", getorigin)
        self.littlecanvas.bind("<Button 1>", self.nodes)
        self.littlecanvas.place(relx=0.05, rely=0.05, relwidth=0.4, relheight=0.9)
        self.littlecanvas.bind("<Configure>", self.resize)
        self.canvas.bind("<Configure>", self.resize)
        self.graph = currentgraph
        self.littlecanvas.img = ImageTk.PhotoImage(imgrender(self.graph)
        )
        self.littlecanvas_img = self.littlecanvas.create_image(0, 0, anchor = "nw", image=self.littlecanvas.img)
        #########deleted nodes##################
        self.nodescanvas= tk.Canvas(self.canvas, bg = 'white', bd = 0, highlightthickness=0)
        self.nodescanvas.place(relx=0.6, rely=0.1, relwidth=0.3, relheight=0.14)
        self.nodescanvas.bind("<Configure>", self.resize)
        self.text = tk.Text(self.nodescanvas, font = ("Arial", 14), width=120, height=40)
        self.nodescanvas.create_window((0, 0), window=self.text, anchor='nw')
        self.text.insert('end','Deleted Contexts:\n' + str(self.delnodes)[1:-1])   
        self.text.configure(state='disabled')
        ###########deleted edges###############################
        self.edgescanvas= tk.Canvas(self.canvas, bg = 'white', bd = 0, highlightthickness=0)
        self.edgescanvas.place(relx=0.6, rely=0.26, relwidth=0.3, relheight=0.14)
        self.edgescanvas.bind("<Configure>", self.resize)
        self.text = tk.Text(self.edgescanvas, font = ("Arial", 14), width=120, height=40)
        self.edgescanvas.create_window((0, 0), window=self.text, anchor='nw')
        self.text.insert('end','Deleted Edges:\n') #+ str(self.edges_del[1:-1]))   
        self.text.configure(state='disabled')
        ##########radiobutton for edge delete node delete##########
        self.radVar = tk.IntVar()
        self.R1 = tk.Radiobutton(self, text="Node Delete", command = self.option1, variable = self.radVar, value = 1, bg = "white", font = ("Arial", 14))
        self.R1.place(relx=0.6, rely=0.7, relwidth=0.3, relheight=0.1)
        self.R2 = tk.Radiobutton(self, text="Edge Delete", command = self.option2, variable = self.radVar, value = 2, bg = "white", font = ("Arial", 14))
        self.R2.place(relx=0.6, rely=0.8, relwidth=0.3, relheight=0.1)
        ####################################
        
        def addnode ():
            self.x1 = self.entry1.get()
            currentgraph.add_node(self.x1, shape = "box", fontsize = "30.0", fontname = "Helvetica", penwidth = "1.0") 
            self.graph = currentgraph        
            self.neww = int(self.canvas.winfo_width()*0.4)
            self.newh = int(self.canvas.winfo_height()*0.9)
            imgrender(self.graph)
            img = Image.open('testdag.png').resize(
                (self.neww, self.newh), Image.ANTIALIAS
            )        
            self.img = ImageTk.PhotoImage(img)
            self.littlecanvas.itemconfig(self.littlecanvas_img, image = self.img)
            #print(self.x1)

        def addedge ():
            self.x1 = self.entry1.get()
            self.x2 = self.entry2.get()
            currentgraph.add_edge(self.x1, self.x2) 
            self.graph = currentgraph        
            self.neww = int(self.canvas.winfo_width()*0.4)
            self.newh = int(self.canvas.winfo_height()*0.9)
            imgrender(self.graph)
            img = Image.open('testdag.png').resize(
                (self.neww, self.newh), Image.ANTIALIAS
            )        
            self.img = ImageTk.PhotoImage(img)
            self.littlecanvas.itemconfig(self.littlecanvas_img, image = self.img)
           # print(self.x1)            

        #canvas to hold buttons    
        self.canvas1 = tk.Canvas(self.canvas, bg = "white")
        self.canvas1.place(relx = 0.55, rely=0.45, relwidth = 0.4, relheight = 0.20)   
        
        #making node add section
        self.entry1 = tk.Entry(self.canvas)         
        self.button1 = tk.Button(text='Add Node 1', command=addnode,  bg = "#b3dcf2", font = ("Arial", 12))
        self.label1 = tk.Label(self.canvas,text= 'Node 1', bg = 'white', font = ("Arial", 12))
        #self.label1.bind("<Configure>", self.resize)
        #self.button1.bind("<Configure>", self.resize)
        #self.entry1.bind("<Configure>", self.resize)
        #self.canvas1.bind("<Configure>", self.resize)
        self.canvas1.create_window(70, 45, window=self.entry1, width = 50) 
        self.canvas1.create_window(70,20, window=self.label1)
        self.canvas1.create_window(70, 80, window=self.button1)
        
        #making edge add function
        self.entry2 = tk.Entry(self.canvas)        
        self.button2 = tk.Button(text='Add Node 2', command=addedge,  bg = "#b3dcf2", font = ("Arial", 12))
        self.label2 = tk.Label(self.canvas,text= 'Node 2', bg = 'white', font = ("Arial", 12))
        #self.label1.bind("<Configure>", self.resize)
        #self.button1.bind("<Configure>", self.resize)
        self.canvas1.create_window(190, 45, window=self.entry2, width = 50)  
        self.canvas1.create_window(190,20, window=self.label2)
        self.canvas1.create_window(190, 80, window=self.button2)
    
    

 
    def option1(self):
        self.mode = "node_delete"
        self.radSel = self.radVar.get()
        print(self.radSel)        

    def option2(self):
        self.mode = "edge_delete"
        self.radSel = self.radVar.get()
        print(self.radSel)
        
    def nodecheck(self, x, y):
        global currentgraph, pos_dag, node_df
        node_inside = "no node" 
        pos_dag = nx.drawing.nx_pydot.graphviz_layout(self.graph, prog='dot')
        node_df = pd.DataFrame.from_dict(pos_dag, orient = 'index')
        y_dist = min(np.array(node_df[1])) - 0.5
        x_dist = min(np.array(node_df[0])) - 0.5
        x_lower = np.array(node_df[0]) - x_dist
        x_upper = np.array(node_df[0]) + x_dist
        y_lower = np.array(node_df[1]) - y_dist
        y_upper = np.array(node_df[1]) + y_dist      
        cavx = self.canvas.winfo_width()*(7/20)
        cany = self.canvas.winfo_height()*(63/80) 
        node_df["x_lower"] = x_lower
        node_df["x_upper"] = x_upper
        node_df["y_lower"] = y_lower
        node_df["y_upper"] = y_upper

        xscale = (x-(self.canvas.winfo_width()/40)) * (max(x_upper)+0.5)/cavx
        yscale = (cany-y+(self.canvas.winfo_height()*(9/160))) * (max(y_upper)+0.5)/cany

        for n in range(len(node_df)):
            if (node_df.iloc[n].x_lower < xscale < node_df.iloc[n].x_upper) and (node_df.iloc[n].y_lower < yscale < node_df.iloc[n].y_upper):
                node_inside = node_df.iloc[n].name 
        return node_inside

    def nodes(self, eventorigin):
        global node, x, y, currentgraph, radSel
        x = eventorigin.x
        y = eventorigin.y
        node = self.nodecheck(x, y)            
        if self.radSel == 1:
            if node == "no node":            
                 currentgraph = currentgraph
            else: 
                 currentgraph.remove_node(node)
                 self.delnodes = np.append(self.delnodes, node)
            print('node delete')
        if self.radSel == 2:
            print(self.edge_nodes)
            self.edge_nodes = np.append(self.edge_nodes, node)
            if len(self.edge_nodes) == 2:
                 try:
                     currentgraph.remove_edge(self.edge_nodes[0], self.edge_nodes[1])
                     self.edges_del = self.edge_nodes
                     self.edgetext = tk.Text(self.edgescanvas, font = ("Arial", 14), width=120, height=40)
                     self.edgescanvas.create_window((0, 0), window=self.edgetext, anchor='nw')
                     self.ednodes = str(self.edges_del[0]) + ' above '+ str(self.edges_del[1])
                     self.new_nodes = self.ednodes.replace("'", "")
                  #  print('new node =' + str(self.new_nodes))
                     self.temp = str(self.temp).replace('[','')
                     self.temp = str(self.temp).replace(']','')
                     self.temp = self.temp + '\n' + str(self.new_nodes)
                     self.edgetext.insert('end','Deleted Edges:' + str(self.temp))   
                     self.edgetext.configure(state='disabled')
                     self.edge_nodes = []                          
                 except Exception:
                     try:
                         currentgraph.remove_edge(self.edge_nodes[1], self.edge_nodes[0])
                         self.edges_del = self.edge_nodes
                         self.edgetext = tk.Text(self.edgescanvas, font = ("Arial", 14), width=120, height=40)
                         self.edgescanvas.create_window((0, 0), window=self.edgetext, anchor='nw')
                         self.ednodes = str(self.edges_del[1]) + ' above '+ str(self.edges_del[0])
                         self.new_nodes = self.ednodes.replace("'", "")
                  #  print('new node =' + str(self.new_nodes))
                         self.temp = str(self.temp).replace('[','')
                         self.temp = str(self.temp).replace(']','')
                         self.temp = self.temp + '\n' + str(self.new_nodes)
                         self.edgetext.insert('end','Deleted Edges:' + str(self.temp))   
                         self.edgetext.configure(state='disabled')                
                         self.edge_nodes = []           
                     except Exception:
                         tk.messagebox.showinfo('Error','An edge doesnt exist between those nodes')
                         self.edge_nodes = []
            print('edge delete')
            print(self.edges_del)
            

        self.graph = currentgraph        
        self.neww = int(self.canvas.winfo_width()*0.4)
        self.newh = int(self.canvas.winfo_height()*0.9)
        imgrender(self.graph)
        img = Image.open('testdag.png').resize(
                (self.neww, self.newh), Image.ANTIALIAS
        )        
        self.img = ImageTk.PhotoImage(img)
        self.littlecanvas.itemconfig(self.littlecanvas_img, image = self.img)
        
        
        self.text = tk.Text(self.nodescanvas, font = ("Arial", 14), width=120, height=40)
        self.nodescanvas.create_window((0, 0), window=self.text, anchor='nw')
        self.nbnodes = str(self.delnodes)
        self.newnodes = self.nbnodes.replace("'", "")
        self.text.insert('end','Deleted Contexts:\n' + str(self.newnodes)[1:-1])   
        self.text.configure(state='disabled')
        
        



    def resize(self, event):
        img = Image.open('testdag.png').resize(
                (event.width, event.height), Image.ANTIALIAS
        )
        self.img = ImageTk.PhotoImage(img)
        self.w = event.width
        self.h = event.height
        print ('width  = {}, height = {}'.format(int(self.w/16), int(self.h/16)))
        print ('totwidth  = {}, totheight = {}'.format(self.w, self.h))
        self.littlecanvas.itemconfig(self.littlecanvas_img, image=self.img)

main_frame = MainFrame()
main_frame.geometry("800x500")
main_frame.mainloop()     