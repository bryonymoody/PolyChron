#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar  9 12:35:28 2020

@author: bryony
"""
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk, ImageChops
from networkx.drawing.nx_pydot import read_dot, write_dot
import networkx as nx
import pydot
import numpy as np
import pandas as pd
import re


  
def trim(im):
   bg = Image.new(im.mode, im.size, im.getpixel((0,0)))
   diff = ImageChops.difference(im, bg)
   diff = ImageChops.add(diff, diff, 2.0, -100)
   bbox = diff.getbbox()
   if bbox:
       return im.crop(bbox) 

def heighwidth(file):
    pos_dag = nx.drawing.nx_pydot.graphviz_layout(file, prog='dot')
    node_df = pd.DataFrame.from_dict(pos_dag, orient = 'index')
    xmax = max(np.array(node_df[0])) + 0.5
    ymax = max(np.array(node_df[1])) + 0.5
    return xmax, ymax

#fileinput = 'bldg-1-5-chronology_copy.dot' 
fileinput = "fig-12-sequence.dot"
#fileinput = "fig-12-polygon-1.dot"
def imagefunc(fileinput):
   file = read_dot(fileinput)
 ####code to get colours####
   f=open(str(fileinput), "r")
   dotstr = f.read()
   dotstr = dotstr.replace(";<", "@<")
   dotstr = dotstr.replace("14.0", "50.0")
#change any ';>' to '@>' then back again after
   x = dotstr.rsplit(";")
   x.pop(8)
   x.pop(8)
   for i in range(len(x)):
      x[i] = x[i].replace("@<", ";<")       
   node_list = list(file.nodes)
   node_info = list() 
 #  j = x[15]
   
   for i in node_list:
       for j in x:
           b = re.search("\"(.*)\" ", j)
           if b != None:
               if i == b.group(1):
                   if i in j and '->' not in j:
                       tset = j[(j.index('[')+1):(len(j)-1)]
                       atr_new = tset.replace('] [', '\',\'')
                       atr_new = atr_new.replace('=', '\':\' ')
                       atr_new = atr_new.replace('\' \"', '\"')
                       atr_new = atr_new.replace('\"\'', '\"')
                       atr_new = atr_new.replace('\' ', '\'')
                       atr_newer = str('{\''+atr_new+'}')
                       #print(atr_new)
                       dicc = eval(atr_newer)
                       node_info.append(dicc)
   
   for k in range(len(node_list)): 
        node_info[k].update({"dates":"test", "finds":"empty", "phase":"phase1"})              
      #  print(node_info[k])  
 #  node_info[1].update({"pos":""10,10""})          
   individ_attrs = zip(node_list, node_info)  
         # node_info.append({"dates":"test", "finds":"empty"})           
   attrs = dict(individ_attrs) #add the dictionary of attributed to a node

   
 #  attrs.update({"dates":"test", "finds":"empty"})
   nx.set_node_attributes(file, attrs)

   return file
        

def imgrender(file):
    write_dot(file, 'fi_new')
    (graph,) = pydot.graph_from_dot_file('fi_new')
    graph.write_png('test.png')
         #  img = Image.open('test.png')
         #  out = img.resize((500, 800), Image.ANTIALIAS)
          # out.save("testdag.png")
    inp = Image.open("test.png")
    inp = trim(inp)
    inp.save("testdag.png")
    outp = Image.open("testdag.png")
    return outp



currentgraph = imagefunc(fileinput)

class MainFrame(tk.Tk):    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        ##### intial values for all the functions
        self.delnodes = []
        self.edge_nodes = []
        self.edges_del = []
        self.temp = []
        self.x1 = 1

        #forming and placing canvas and little canvas
        self.canvas = tk.Canvas(self, bg = "#b3dcf2",  bd = 0, highlightthickness=0)  
        self.canvas.place(relx=0, rely=0, relwidth=1, relheight=1)
        self.canvas.update() 
        self.littlecanvas= tk.Canvas(self.canvas, bg = 'black', bd = 0, selectborderwidth = 0, highlightthickness=0, insertwidth = 0)
        #print(self.littlecanvas.config())
        self.littlecanvas.place(relx=0.05, rely=0.05, relwidth=0.4, relheight=0.9)
        self.littlecanvas.update()
        #### bind comands to canvas and little canvas ######
        self.littlecanvas.bind("<Configure>", self.resize)
        #self.littlecanvas.bind("<Button 1>", self.getorigin)
        self.littlecanvas.bind("<Button 1>", self.nodes)
        self.canvas.bind("<Configure>", self.resize)
        self.littlecanvas.bind("<MouseWheel>", self.wheel)
        self.littlecanvas.bind('<Button-4>',   self.wheel)  # only with Linux, wheel scroll down
        self.littlecanvas.bind('<Button-5>',   self.wheel)
        self.littlecanvas.bind('<Button-3>', self.move_from)
        self.littlecanvas.bind("<B3-Motion>", self.move_to)
        
        #placing image on littlecanvas from graph
        self.littlecanvas.rowconfigure(0, weight=1)
        self.littlecanvas.columnconfigure(0, weight=1)
        self.graph = currentgraph
  #      self.image = imgrender(self.graph).resize(self.littlecanvas.canvasx(self.littlecanvas.winfo_width()), int(self.littlecanvas.winfo_height()*0.9)), Image.ANTIALIAS
   #     )
        #print(self.canvas.winfo_width())
        self.image = imgrender(self.graph).resize((int(2000*0.4), int(1000*0.9)), Image.ANTIALIAS
        ) 
        #print(self.image.size)
        self.littlecanvas.img = ImageTk.PhotoImage(self.image
        )
        self.littlecanvas_img = self.littlecanvas.create_image(0, 0, anchor = "nw", image=self.littlecanvas.img)     
        #print(self.littlecanvas.winfo_width())
        #print(self.littlecanvas.winfo_height())      
        self.width, self.height = self.image.size
       # print(self.image.size)
        self.imscale = 1.0  # scale for the canvaas image
        self.delta = 1.1  # zoom magnitude
        # Put image into container rectangle and use it to set proper coordinates to the image
        self.container = self.littlecanvas.create_rectangle(0, 0, self.width, self.height, width=0)
        #print(self.width, self.height)

        #########deleted nodes##################
        self.nodescanvas= tk.Canvas(self.canvas, bg = 'white', bd = 0, highlightthickness=0)
        self.nodescanvas.place(relx=0.5, rely=0.05, relwidth=0.45, relheight=0.14)
        self.nodescanvas.bind("<Configure>", self.resize)
        self.text = tk.Text(self.nodescanvas, font = ("Arial", 14), width=120, height=40)
        self.nodescanvas.create_window((0, 0), window=self.text, anchor='nw')
        self.text.insert('end','Deleted Contexts:\n' + str(self.delnodes)[1:-1])   
        self.text.configure(state='disabled')
        ###########deleted edges###############################
        self.edgescanvas= tk.Canvas(self.canvas, bg = 'white', bd = 0, highlightthickness=0)
        self.edgescanvas.place(relx=0.5, rely=0.15, relwidth=0.45, relheight=0.14)
        self.edgescanvas.bind("<Configure>", self.resize)
        self.text = tk.Text(self.edgescanvas, font = ("Arial", 14), width=120, height=40)
        self.edgescanvas.create_window((0, 0), window=self.text, anchor='nw')
        self.text.insert('end','Deleted Edges:\n') #+ str(self.edges_del[1:-1]))   
        self.text.configure(state='disabled')
        ##########radiobutton for edge delete node delete##########
        self.radVar = tk.IntVar()
        self.R1 = tk.Radiobutton(self, text="Node Delete", command = self.option1, variable = self.radVar, value = 1, bg = "white", font = ("Arial", 14))
        self.R1.place(relx=0.5, rely=0.65, relwidth=0.15, relheight=0.08)
        self.R2 = tk.Radiobutton(self, text="Edge Delete", command = self.option2, variable = self.radVar, value = 2, bg = "white", font = ("Arial", 14))
        self.R2.place(relx=0.5, rely=0.75, relwidth=0.15, relheight=0.08)
        self.R3 = tk.Radiobutton(self, text="Metadata", command = self.option3, variable = self.radVar, value = 3, bg = "white", font = ("Arial", 14))
        self.R3.place(relx=0.5, rely=0.85, relwidth=0.15, relheight=0.08)
        ############zoom fuction#########################


        def addnode ():
            self.x1 = self.entry1.get()
            currentgraph.add_node(self.x1, shape = "box", fontsize = "30.0", fontname = "Helvetica", penwidth = "1.0") 
            self.graph = currentgraph        
            self.neww = int(self.canvas.winfo_width()*0.4)
            self.newh = int(self.canvas.winfo_height()*0.9)
            imgrender(self.graph)
            self.image = Image.open('testdag.png').resize(
                (self.neww, self.newh), Image.ANTIALIAS
            )        
           # self.image = ImageTk.PhotoImage(img)
            ##TRY AND MAKE SHOW IMAGE WORK AS ITEMCONFIG
            self.show_image()
            #self.littlecanvas.itemconfig(self.littlecanvas_img, image = self.img)
            #print(self.x1)

        def addedge ():
            self.x1 = self.entry1.get()
            self.x2 = self.entry2.get()
            currentgraph.add_edge(self.x1, self.x2) 
            self.graph = currentgraph        
            self.neww = int(self.canvas.winfo_width()*0.4)
            self.newh = int(self.canvas.winfo_height()*0.9)
            imgrender(self.graph)
            self.image = Image.open('testdag.png').resize(
                (self.neww, self.newh), Image.ANTIALIAS
            )        
           # self.image = ImageTk.PhotoImage(img)
            #self.littlecanvas.itemconfig(self.littlecanvas_img, image = self.img)
            self.show_image()
#        def menuchange(x):
#            print(x=="finds")
#            if x == "finds":
#                self.w2 = tk.OptionMenu(self.canvas2, self.metadata_level2,'find1', 'find2', 'find3')
#            if x == "dates":
#                self.w2 = tk.OptionMenu(self.canvas2, self.metadata_level2,'dates1', 'dates2', 'dates3')
#            if x == "phase":
#                self.w2 = tk.OptionMenu(self.canvas2, self.metadata_level2,'phase1', 'phase2', 'phase3')            
#           # print(self.x1)   


        #canvas to hold buttons    
        self.canvas1 = tk.Canvas(self.canvas, bg = "white")
        self.canvas1.place(relx = 0.50, rely=0.35, relwidth = 0.25, relheight = 0.15) 
        
        #canvas to hold metadata input    
        self.canvas2 = tk.Canvas(self.canvas, bg = "white")
        self.canvas2.place(relx = 0.50, rely=0.5, relwidth = 0.25, relheight = 0.15)   
        
        #canvas to hold the metadata
        self.metacanvas = tk.Canvas(self.canvas, bg = "white")
        self.metacanvas.place(relx = 0.75, rely=0.35, relwidth = 0.15, relheight = 0.2)
        #self.metacanvas.create_text((50,20), text = "Metadata")#, bg = "#b3dcf2", font = ("Arial", 12))
        self.abovebelowcanvas = tk.Canvas(self.canvas, bg = "white")
        self.abovebelowcanvas.place(relx = 0.75, rely=0.6, relwidth = 0.15, relheight = 0.2)
                
        #making node add section
        self.entry1 = tk.Entry(self.canvas)         
        self.button1 = tk.Button(text='Add Node 1', command=addnode,  bg = "#b3dcf2", font = ("Arial", 12))
        self.label1 = tk.Label(self.canvas,text= 'Node 1', bg = 'white', font = ("Arial", 12))
        #self.label1.bind("<Configure>", self.resize)
        #self.button1.bind("<Configure>", self.resize)
        #self.entry1.bind("<Configure>", self.resize)
        #self.canvas1.bind("<Configure>", self.resize)
        self.canvas1.create_window(70, 45, window=self.entry1, width = 50) 
        self.canvas1.create_window(70, 20, window=self.label1)
        self.canvas1.create_window(70, 80, window=self.button1)
        
        #making edge add function
        self.entry2 = tk.Entry(self.canvas)        
        self.button2 = tk.Button(text='Add Node 2', command=addedge,  bg = "#b3dcf2", font = ("Arial", 12))
        self.label2 = tk.Label(self.canvas,text= 'Node 2', bg = 'white', font = ("Arial", 12))
        #self.label1.bind("<Configure>", self.resize)
        #self.button1.bind("<Configure>", self.resize)
        self.canvas1.create_window(190, 45, window=self.entry2, width = 50)  
        self.canvas1.create_window(190,20, window=self.label2)
        self.canvas1.create_window(190, 80, window=self.button2)
        
        #entry box for adding metadata          
        self.entry3 = tk.Entry(self.canvas)         


        self.button3 = tk.Button(text='Add Metadata to node',  bg = "#b3dcf2", font = ("Arial", 12), command = self.testcom) #need to add command
        self.label3 = tk.Label(self.canvas,text= 'Node', bg = 'white', font = ("Arial", 12))        
        self.canvas2.create_window(70, 45, window=self.entry3, width = 50) 
        self.canvas2.create_window(70,20, window=self.label3)        
        self.canvas2.create_window(140, 100, window=self.button3)
        self.dict = {'Finds': ['Find1', 'Find2', 'Find3'],
                     'Dates': ['Dates1', 'Dates2', 'Dates3'],
                     'Phase': ['Phase1', 'Phase2', 'Phase3']}

        self.variable_a = tk.StringVar(self.canvas2)
        self.variable_b = tk.StringVar(self.canvas2)

        self.variable_a.trace('w', self.update_options)
  #      self.variable_b.trace('w', self.testcom) 

        self.optionmenu_a = tk.OptionMenu(self.canvas2, self.variable_a, *self.dict.keys())
        self.optionmenu_b = tk.OptionMenu(self.canvas2, self.variable_b, '')

        self.variable_a.set('Finds')

        self.optionmenu_a.place(relx = 0.30, rely=0.25)
        self.optionmenu_b.place(relx = 0.550, rely=0.25)        


    def getorigin(self, eventorigin):
        global x,y, node
        bbox = self.littlecanvas.bbox(self.container)  # get image area
        #print(bbox)  
        x = eventorigin.x 
        y = eventorigin.y  
        #print(x,y)

    def option1(self):
        self.mode = "node_delete"
        self.radSel = self.radVar.get()
        #print(self.radSel)        

    def option2(self):
        self.mode = "edge_delete"
        self.radSel = self.radVar.get()
        
    def option3(self):
        self.mode = "get_metadata"
        self.radSel = self.radVar.get()        
        #print(self.radSel)
        
    
    def nodecheck(self, x, y):
        global currentgraph, pos_dag, node_df
        node_inside = "no node" 
       # graph = imagefunc(fileinput)
       # pos_dag = nx.drawing.nx_pydot.graphviz_layout(graph, prog='dot') #get coords in dot format, not scaled yet
        pos_dag = nx.drawing.nx_pydot.graphviz_layout(self.graph, prog='dot') #get coords in dot format, not scaled yet
      #  print(pos_dag)
        node_df = pd.DataFrame.from_dict(pos_dag, orient = 'index') #forms a dataframe from the dicitonary of coords
        y_dist = min(np.array(node_df[1])) - 0.5 #wprks out how large the node is 
        x_dist = min(np.array(node_df[0])) - 0.5
        #print(str(y_dist) + "y distance")
        #print(str(x_dist) + "x distance")
        #givens upper and lower bounds for checking each node
        x_lower = np.array(node_df[0]) - x_dist 
        x_upper = np.array(node_df[0]) + x_dist
        y_lower = np.array(node_df[1]) - y_dist
        y_upper = np.array(node_df[1]) + y_dist      
        cavx = self.canvas.winfo_width()*(0.4)
        cany = self.canvas.winfo_height()*(0.9) 
        node_df["x_lower"] = x_lower
        node_df["x_upper"] = x_upper
        node_df["y_lower"] = y_lower
        node_df["y_upper"] = y_upper
        xscale = (x)* (max(x_upper)+0.5)/cavx
       # if outp.size[1] > self.canvas.winfo_height():
        #    yscale = (cany-y+(self.canvas.winfo_height()*(0.0288))) * (max(y_upper)+0.5)/cany
        #else: 
        yscale = (cany-y) * (max(y_upper)+0.5)/cany
      
        # print(xscale, self.canvas.winfo_width(), self.canvas.winfo_width()/40*(max(x_upper)+0.5)/cavx)
       # print(yscale, self.canvas.winfo_height(), self.canvas.winfo_height()*(9/160)*(max(y_upper)+0.5)/cany)
       # print(xscale, self.canvas.winfo_width(), self.canvas.winfo_width()/40*(max(x_upper)+0.5)/cavx)
       # print(x, y, node_df, self.canvas.winfo_height())

 
        
        for n in range(len(node_df)):
            if (node_df.iloc[n].x_lower < xscale < node_df.iloc[n].x_upper) and (node_df.iloc[n].y_lower < yscale < node_df.iloc[n].y_upper):
                node_inside = node_df.iloc[n].name 
        return node_inside


    def scroll_y(self, *args, **kwargs):
    #''' Scroll canvas vertically and redraw the image '''
        self.canvas.yview(*args, **kwargs)  # scroll vertically
        self.show_image()  # redraw the image

    def scroll_x(self, *args, **kwargs):
    #''' Scroll canvas horizontally and redraw the image '''
        self.canvas.xview(*args, **kwargs)  # scroll horizontally
        self.show_image()  # redraw the image

    def nodes(self, eventorigin):
        global node, x, y, currentgraph, radSel
        bbox = self.littlecanvas.bbox(self.container)  # get image area               
        x = (eventorigin.x*int(2000*0.4))/bbox[2]
        y = (eventorigin.y*int(1000*0.9))/bbox[3]

        node = self.nodecheck(x, y)            
        if self.radSel == 1:
            if node == "no node":            
                 currentgraph = currentgraph
            else: 
                 currentgraph.remove_node(node)
                 self.delnodes = np.append(self.delnodes, node)
      #      print('node delete')
        if self.radSel == 2:
           # print(self.edge_nodes)
            self.edge_nodes = np.append(self.edge_nodes, node)
            if len(self.edge_nodes) == 2:
                 try:
                     currentgraph.remove_edge(self.edge_nodes[0], self.edge_nodes[1])
                     self.edges_del = self.edge_nodes
                     self.edgetext = tk.Text(self.edgescanvas, font = ("Arial", 14), width=120, height=40)
                     self.edgescanvas.create_window((0, 0), window=self.edgetext, anchor='nw')
                     self.ednodes = str(self.edges_del[0]) + ' above '+ str(self.edges_del[1])
                     self.new_nodes = self.ednodes.replace("'", "")
                  #  print('new node =' + str(self.new_nodes))
                     self.temp = str(self.temp).replace('[','')
                     self.temp = str(self.temp).replace(']','')
                     self.temp = self.temp + '\n' + str(self.new_nodes)
                     self.edgetext.insert('end','Deleted Edges:' + str(self.temp))   
                     self.edgetext.configure(state='disabled')
                     self.edge_nodes = []                          
                 except Exception:
                     try:
                         currentgraph.remove_edge(self.edge_nodes[1], self.edge_nodes[0])
                         self.edges_del = self.edge_nodes
                         self.edgetext = tk.Text(self.edgescanvas, font = ("Arial", 14), width=120, height=40)
                         self.edgescanvas.create_window((0, 0), window=self.edgetext, anchor='nw')
                         self.ednodes = str(self.edges_del[1]) + ' above '+ str(self.edges_del[0])
                         self.new_nodes = self.ednodes.replace("'", "")
                  #  print('new node =' + str(self.new_nodes))
                         self.temp = str(self.temp).replace('[','')
                         self.temp = str(self.temp).replace(']','')
                         self.temp = self.temp + '\n' + str(self.new_nodes)
                         self.edgetext.insert('end','Deleted Edges:' + str(self.temp))   
                         self.edgetext.configure(state='disabled')                
                         self.edge_nodes = []           
                     except Exception:
                         tk.messagebox.showinfo('Error','An edge doesnt exist between those nodes')
                         self.edge_nodes = []
        if self.radSel == 3:
                    self.metatext = tk.Text(self.metacanvas, font = ("Arial", 14), width=120, height=40)
                    self.metacanvas.create_window((0, 0), window=self.metatext, anchor='nw')
                    self.meta = str(currentgraph.nodes()[str(node)])
                    self.meta1 = pd.DataFrame.from_dict(currentgraph.nodes()[str(node)], orient='index')
                    print(type(self.meta1))
                    print(self.meta1.size)
                    self.meta1 = self.meta1.loc["dates":"phase",]
                    self.newmeta = self.meta.replace("'", "")
                    self.metastr = str(self.newmeta)[1:-1]
                    self.metastr = self.metastr.replace(",", "\n")
                    self.metatext.insert('end','Metadata of node ' + str(node) + ':\n' + str(self.meta1))   
                    self.metatext.configure(state='disabled')
        

            

        self.graph = currentgraph        
        self.neww = int(self.canvas.winfo_width()*0.4)
        self.newh = int(self.canvas.winfo_height()*0.9)
        imgrender(self.graph)
        self.image = Image.open('testdag.png').resize(
                (self.neww, self.newh), Image.ANTIALIAS
        )        
      #  self.image = ImageTk.PhotoImage(img)
      #  self.littlecanvas.delete(self.image)
        self.show_image() 
      #  self.littlecanvas.itemconfig(self.littlecanvas_img, image = self.img)
        
        
        self.text = tk.Text(self.nodescanvas, font = ("Arial", 14), width=120, height=40)
        self.nodescanvas.create_window((0, 0), window=self.text, anchor='nw')
        self.nbnodes = str(self.delnodes)
        self.newnodes = self.nbnodes.replace("'", "")
        self.text.insert('end','Deleted Contexts:\n' + str(self.newnodes)[1:-1])   
        self.text.configure(state='disabled')
        

    def move_from(self, event):
        ''' Remember previous coordinates for scrolling with the mouse '''
        self.littlecanvas.scan_mark(event.x, event.y)
        print(event.x, event.y)
        

    def move_to(self, event):
        ''' Drag (move) canvas to the new position '''
        self.littlecanvas.scan_dragto(event.x, event.y, gain=1)
        self.show_image() 
        bbox = self.littlecanvas.bbox(self.container)  # get image area
        print(bbox)
        print(self.littlecanvas.coords(self.imagetk))
        # redraw the image

    def wheel(self, event):
        ''' Zoom with mouse wheel '''
        x = self.littlecanvas.canvasx(event.x)
        y = self.littlecanvas.canvasy(event.y)
        bbox = self.littlecanvas.bbox(self.container)  # get image area
        #print(bbox)
        if bbox[0] < x < bbox[2] and bbox[1] < y < bbox[3]: pass  # Ok! Inside the image
        else: return  # zoom only inside image area
        scale = 1.0
        # Respond to Linux (event.num) or Windows (event.delta) wheel event
        if event.num == 5 or event.delta == -120:  # scroll down
            i = min(self.width, self.height)
            if int(i * self.imscale) < 30: return  # image is less than 30 pixels
            self.imscale /= self.delta
            scale        /= self.delta
        if event.num == 4 or event.delta == 120:  # scroll up
            i = min(self.littlecanvas.winfo_width(), self.littlecanvas.winfo_height())
            if i < self.imscale: return  # 1 pixel is bigger than the visible area
            self.imscale *= self.delta
            scale        *= self.delta
        self.littlecanvas.scale('all', 0, 0, scale, scale)  # rescale all canvas objects
        self.show_image()

    def show_image(self, event=None):
        ''' Show image on the Canvas '''
        bbox1 = self.littlecanvas.bbox(self.container)  # get image area
        # Remove 1 pixel shift at the sides of the bbox1
        bbox1 = (bbox1[0] + 1, bbox1[1] + 1, bbox1[2] - 1, bbox1[3] - 1)
      #  print(self.littlecanvas.winfo_width())
        bbox2 = (self.littlecanvas.canvasx(0),  # get visible area of the canvas
                 self.littlecanvas.canvasy(0),
                 self.littlecanvas.canvasx(self.littlecanvas.winfo_width()),
                 self.littlecanvas.canvasy(self.littlecanvas.winfo_height()))
        bbox = [min(bbox1[0], bbox2[0]), min(bbox1[1], bbox2[1]),  # get scroll region box
                max(bbox1[2], bbox2[2]), max(bbox1[3], bbox2[3])]
        bbox1 = self.littlecanvas.bbox(self.container)  # get image area
     #   print('bbox1')
      #  print(bbox1)
       # print(bbox2)#WHY IS BBOX NOT SIZE OF CANVAS
        if bbox[0] == bbox2[0] and bbox[2] == bbox2[2]:  # whole image in the visible area
            bbox[0] = bbox1[0]
            bbox[2] = bbox1[2]
        if bbox[1] == bbox2[1] and bbox[3] == bbox2[3]:  # whole image in the visible area
            bbox[1] = bbox1[1]
            bbox[3] = bbox1[3]
        self.littlecanvas.configure(scrollregion=bbox)  # set scroll region
        x1 = max(bbox2[0] - bbox1[0], 0)  # get coordinates (x1,y1,x2,y2) of the image tile
        y1 = max(bbox2[1] - bbox1[1], 0)
        x2 = min(bbox2[2], bbox1[2]) - bbox1[0]
        y2 = min(bbox2[3], bbox1[3]) - bbox1[1]
#        print(x1,x2,y1,y2, bbox2[0] - bbox1[0], bbox2[2], bbox1[1])
        if int(x2 - x1) > 0 and int(y2 - y1) > 0:  # show image if it in the visible area
            x = min(int(x2 / self.imscale), self.width)   # sometimes it is larger on 1 pixel...
            y = min(int(y2 / self.imscale), self.height)  # ...and sometimes not
            image = self.image.crop((int(x1 / self.imscale), int(y1 / self.imscale), x, y))
            self.imagetk = ImageTk.PhotoImage(image.resize((int(x2 - x1), int(y2 - y1))))
           # self.littlecanvas.itemconfig(self.littlecanvas_img, image = imagetk)
            self.littlecanvas.delete(self.littlecanvas_img)
            self.imageid = self.littlecanvas.create_image(max(bbox2[0], bbox1[0]), max(bbox2[1], bbox1[1]),                                              anchor='nw', image=self.imagetk)
            #self.littlecanvas.lower(self.imageid)  # set image into background
            self.littlecanvas.imagetk = self.imagetk 
          #  print(max(bbox2[0], bbox1[0]), max(bbox2[1], bbox1[1]))# keep an extra reference to prevent garbage-collection
          #  self.canvas.itemconfig(self.canvas_img, image=imagetk)
   
       # self.place(relx = 0.70, rely=0.35)


    def update_options(self, *args):
        countries = self.dict[self.variable_a.get()]
        self.variable_b.set(countries[0])

        menu = self.optionmenu_b['menu']
        menu.delete(0, 'end')

        for country in countries:
            menu.add_command(label=country, command=lambda nation=country: self.variable_b.set(nation))
    def testcom(self, *args):
       # print(self.variable_a.get())
       # print(self.entry3.get())
        if self.variable_a.get() == "Phase":
            if self.variable_b.get() == "Phase1":
                currentgraph.nodes()[str(self.entry3.get())].update({"phase":"Phase 1"})
            if self.variable_b.get() == "Phase2":
                currentgraph.nodes()[str(self.entry3.get())].update({"phase":"Phase 2"})
            if self.variable_b.get() == "Phase3":
                currentgraph.nodes()[str(self.entry3.get())].update({"phase":"Phase 3"})
        if self.variable_a.get() == "Dates":
            if self.variable_b.get() == "Dates1":
                currentgraph.nodes()[str(self.entry3.get())].update({"dates":"Date 1"})
            if self.variable_b.get() == "Dates2":
                currentgraph.nodes()[str(self.entry3.get())].update({"dates":"Date 2"})
            if self.variable_b.get() == "Dates3":
                currentgraph.nodes()[str(self.entry3.get())].update({"dates":"Date 3"})
        if self.variable_a.get() == "Finds":
            if self.variable_b.get() == "Find1":
                currentgraph.nodes()[str(self.entry3.get())].update({"finds":"Find1"})
            if self.variable_b.get() == "Find2":
                currentgraph.nodes()[str(self.entry3.get())].update({"finds":"Find 2"})
            if self.variable_b.get() == "Find3":
                currentgraph.nodes()[str(self.entry3.get())].update({"finds":"- Find 3"})
                                                                  
        self.metatext = tk.Text(self.metacanvas, font = ("Arial", 14), width=120, height=40)
        self.metacanvas.create_window((0, 0), window=self.metatext, anchor='nw')
        self.meta1 = pd.DataFrame.from_dict(currentgraph.nodes()[str(self.entry3.get())], orient='index')
        self.meta1 = self.meta1.loc["dates":"phase",]
        self.metatext.insert('end','Metadata of node ' + str(self.entry3.get()) + ':\n' + str(self.meta1))   
        self.metatext.configure(state='disabled')
        self.rellist = list(nx.line_graph(currentgraph))
        self.above = ()
        self.below = ()
        for i in range(len(self.rellist)):
            if str(self.entry3.get()) in self.rellist[i]:
                 if str(self.entry3.get()) == self.rellist[i][0]:
                     self.below = np.append(self.below, self.rellist[i][1])
                     #print("below")
                     #print(self.below)
                 if str(self.entry3.get()) == self.rellist[i][1]:
                     self.above = np.append(self.above, self.rellist[i][0])
                     #print("above")
                     #print(self.above)
        self.abovebelowtext = tk.Text(self.abovebelowcanvas, font = ("Arial", 14), width=120, height=40)
        self.abovebelowcanvas.create_window((0, 0), window=self.abovebelowtext, anchor='nw')
        self.abovebelowtext.insert('end','Direct stratigraphic relationships:\n Contexts above: ' + str(self.above) + '\n' + 'Contexts below:' + str(self.below))                                        
                
        print(self.rellist)
        
            #print(type(currentgraph.nodes()['478']))
            # node_info[k].update({"phase":"phase1"})
                      

    def resize(self, event):
        img = Image.open('testdag.png').resize(
                (event.width, event.height), Image.ANTIALIAS
        )
        self.img = ImageTk.PhotoImage(img)
        self.w = event.width
        self.h = event.height
     #   print ('width  = {}, height = {}'.format(int(self.w/16), int(self.h/16)))
      #  print ('totwidth  = {}, totheight = {}'.format(self.w, self.h))
        self.littlecanvas.itemconfig(self.littlecanvas_img, image=self.img)

main_frame = MainFrame()
main_frame.geometry("2000x1000")
main_frame.mainloop()     